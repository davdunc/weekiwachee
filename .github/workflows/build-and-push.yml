name: Build and Push Mermaid CLI Container

# Triggers for the workflow
on:
  push:
    branches:
      - main  # Or your default branch (e.g., master)
    tags:
      - 'v*.*.*' # Trigger on version tags like v1.0.0
  workflow_dispatch: # Allows manual triggering from the Actions tab

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    # Permissions needed to push to GitHub Container Registry (GHCR)
    permissions:
      contents: read      # To checkout the repository
      packages: write     # To push packages (container images) to GHCR

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU (for multi-platform builds, optional if only building for amd64)
        uses: docker/setup-qemu-action@v3

      - name: Install Podman
        run: |
          sudo apt-get update
          sudo apt-get install -y podman
          podman --version # Verify installation

      # --- Login to Container Registry ---
      # Option A: Login to GitHub Container Registry (GHCR) - Recommended for GitHub projects
      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | podman login ghcr.io -u ${{ github.actor }} --password-stdin

      # Option B: Login to Docker Hub (Uncomment and configure secrets if using Docker Hub)
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | podman login docker.io -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: Build and Push Multi-Arch Image
        env:
          IMAGE_NAME: weekiwachee # The project name
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }} # Uncomment if using Docker Hub
        run: |
          # Image naming:
          # For GHCR: ghcr.io/OWNER/IMAGE_NAME (OWNER is your GitHub username or org name, needs to be lowercase)
          # For Docker Hub: docker.io/DOCKERHUB_USERNAME/IMAGE_NAME or just DOCKERHUB_USERNAME/IMAGE_NAME

          REGISTRY_PATH="docker.io/${DOCKERHUB_USERNAME}/${IMAGE_NAME}"

          # Define platforms
          PLATFORMS="linux/amd64,linux/arm64"

          # Create tags
          TAG_LATEST="latest"
          TAG_SHA_SHORT=$(echo "${{ github.sha }}" | cut -c1-7) # Short commit SHA


          # Base image name for manifest
          MANIFEST_BASE_IMAGE="${REGISTRY_PATH}"

          echo "Building multi-arch image for platforms: ${PLATFORMS}"
          # Podman build command with --platform and --manifest"
          # This builds for all specified platforms and creates/updates a manifest list.
          
          podman build \
            --platform="${PLATFORMS}" \
            --manifest="${MANIFEST_BASE_IMAGE}:${TAG_LATEST}" \
            --manifest "${MANIFEST_BASE_IMAGE}:${TAG_SHA_SHORT}" \
            -f Containerfile .

          echo "Pushing manifest: ${MANIFEST_BASE_IMAGE}:${TAG_LATEST}"
          podman manifest push --all "${MANIFEST_BASE_IMAGE}:${TAG_LATEST}" "${REGISTRY_PATH}:${TAG_LATEST}"

          echo "Pushing manifest: ${MANIFEST_BASE_IMAGE}:${TAG_SHA_SHORT}"
          podman manifest push --all "${REGISTRY_PATH}:${TAG_SHA_SHORT}" "${REGISTRY_PATH}:${TAG_SHA_SHORT}"


          # If the workflow was triggered by a tag, also tag and push with that version
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            TAG_VERSION="${{ github.ref_name }}" # e.g., v1.0.0
            echo "Workflow triggered by tag: ${TAG_VERSION}. Tagging and pushing this version to latest."

            podman manifest create "${MANIFEST_BASE_IMAGE}:${TAG_VERSION}"
            podman manifest add "${MANIFEST_BASE_IMAGE}:${TAG_VERSION}" "${REGISTRY_PATH}:${TAG_LATEST}"
            
            echo "Adding version tag ${TAG_VERSION} to the manifest list"
            podman manifest annotate --arch "*" "${MANIFEST_BASE_IMAGE}:${TAG_LATEST}" "${MANIFEST_BASE_IMAGE}:${TAG_VERSION}" # This might not be the command

            echo "Pushing manifest ${MANIFEST_BASE_IMAGE}:${TAG_LATEST} also as ${MANIFEST_BASE_IMAGE}:${TAG_VERSION}"
            podman manifest push --all "${MANIFEST_BASE_IMAGE}:${TAG_LATEST}" "${REGISTRY_PATH}:${TAG_VERSION}"
            
          fi

      - name: Log out from registries
        if: always() # Run even if previous steps fail, to ensure logout
        run: |
          podman logout ghcr.io || echo "GHCR logout failed or was not logged in."
          podman logout docker.io || echo "Docker Hub logout failed or was not logged in."
